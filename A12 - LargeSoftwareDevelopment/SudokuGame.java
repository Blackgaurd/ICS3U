
/**
 * sudoku puzzle solver
 *
 * modified     20210818
 * date         20210818
 *
 * @filename SudokuGame.java
 * @author Bryan Deng
 * @version 1.0
 * @see unit 3 activity 6 content
 */

import java.util.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Font;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JTextField;

public class SudokuGame extends javax.swing.JFrame {

    /**
     * Creates new form LargeSoftwareDevelopment
     */
    public SudokuGame() {
        initComponents();
        initBoard();
        initComponents(); // init again to fix formatting after initBoard()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBoardInput = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        btnSolve = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        pnlBoardOutput = new javax.swing.JPanel();
        lblOutput = new javax.swing.JLabel();
        btnDemo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlBoardInput.setPreferredSize(new java.awt.Dimension(225, 225));

        javax.swing.GroupLayout pnlBoardInputLayout = new javax.swing.GroupLayout(pnlBoardInput);
        pnlBoardInput.setLayout(pnlBoardInputLayout);
        pnlBoardInputLayout.setHorizontalGroup(
            pnlBoardInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 225, Short.MAX_VALUE)
        );
        pnlBoardInputLayout.setVerticalGroup(
            pnlBoardInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lblTitle.setFont(new java.awt.Font("Ebrima", 1, 24)); // NOI18N
        lblTitle.setText("Sudoku Solver");

        btnSolve.setFont(new java.awt.Font("Ebrima", 1, 16)); // NOI18N
        btnSolve.setText("SOLVE");
        btnSolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolveActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Ebrima", 1, 16)); // NOI18N
        btnReset.setText("RESET");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBoardOutputLayout = new javax.swing.GroupLayout(pnlBoardOutput);
        pnlBoardOutput.setLayout(pnlBoardOutputLayout);
        pnlBoardOutputLayout.setHorizontalGroup(
            pnlBoardOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 225, Short.MAX_VALUE)
        );
        pnlBoardOutputLayout.setVerticalGroup(
            pnlBoardOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 225, Short.MAX_VALUE)
        );

        lblOutput.setFont(new java.awt.Font("Ebrima", 0, 14)); // NOI18N
        lblOutput.setText(" ");

        btnDemo.setFont(new java.awt.Font("Ebrima", 1, 16)); // NOI18N
        btnDemo.setText("DEMO BOARD");
        btnDemo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDemoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSolve)
                        .addGap(18, 18, 18)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDemo))
                    .addComponent(lblTitle)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlBoardInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(pnlBoardOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlBoardOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBoardInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSolve)
                    .addComponent(btnReset)
                    .addComponent(btnDemo))
                .addGap(18, 18, 18)
                .addComponent(lblOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private class InvalidInputException extends Exception {

        public InvalidInputException() {
            super("Invalid input");
        }
    }

    private class Pair {

        int row, col;

        public Pair(int row, int col) {
            this.row = row;
            this.col = col;
        }
    }

    private class SudokuTileInput extends JTextField {

        public SudokuTileInput() {
            this.setFont(new Font("Ebrima", Font.BOLD, 16));
            this.setHorizontalAlignment(JTextField.CENTER);
            this.setPreferredSize(new Dimension(15, 15));
        }

        public void reset() {
            this.setText("");
        }

        public char getVal() throws InvalidInputException {
            String inputString = this.getText();

            if (inputString.length() > 1) {
                throw new InvalidInputException();
            }
            if (inputString.isEmpty()) {
                return (char) 0;
            }

            char val = inputString.charAt(0);
            if (val < '1' || val > '9') {
                throw new InvalidInputException();
            }
            return val;
        }
    }

    private class SudokuTileOutput extends JLabel {

        // value of board position (1-9)
        // 0 means empty
        int val = 0;

        public SudokuTileOutput() {
            this.setFont(new Font("Ebrima", Font.PLAIN, 16));
            this.setHorizontalAlignment(JLabel.CENTER);
            this.setPreferredSize(new Dimension(15, 15));
            this.setBorder(BorderFactory.createLineBorder(Color.black));
        }

        public void reset() {
            val = 0;
            unboldFont();
            this.setText("");
        }

        public void boldFont() {
            Font curFont = this.getFont();
            this.setFont(curFont.deriveFont(curFont.getStyle() | Font.BOLD));
        }

        public void unboldFont() {
            Font curFont = this.getFont();
            this.setFont(curFont.deriveFont(curFont.getStyle() & ~Font.BOLD));
        }
    }
    
    private final int BOARD_SIZE = 9;

    SudokuTileInput[][] boardIn = new SudokuTileInput[BOARD_SIZE][BOARD_SIZE];

    SudokuTileOutput[][] boardOut = new SudokuTileOutput[BOARD_SIZE][BOARD_SIZE];

    ArrayList<Pair> emptySquares = new ArrayList<>();

    private void initBoard() {
        pnlBoardInput.setLayout(new GridLayout(BOARD_SIZE, BOARD_SIZE));
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                boardIn[i][j] = new SudokuTileInput();
                pnlBoardInput.add(boardIn[i][j]);
            }
        }

        pnlBoardOutput.setLayout(new GridLayout(BOARD_SIZE, BOARD_SIZE));
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                boardOut[i][j] = new SudokuTileOutput();
                pnlBoardOutput.add(boardOut[i][j]);
            }
        }
    }

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                boardIn[i][j].reset();
                boardOut[i][j].reset();
            }
        }

        lblOutput.setForeground(Color.black);
        lblOutput.setText("");
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolveActionPerformed
		for (int i = 0; i < BOARD_SIZE; i++) {
			for (int j = 0; j < BOARD_SIZE; j++) {
				boardOut[i][j].reset();
			}
		}
		
        lblOutput.setForeground(Color.black);
        lblOutput.setText("");

        loadValues();

        boolean solveable = isValidPermutation() && solveRecur(0);

        if (solveable) {
            outputBoard();
            lblOutput.setForeground(Color.green);
            lblOutput.setText("Sudoku solved!");
        } else {
            lblOutput.setForeground(Color.red);
            lblOutput.setText("There is no possible solution to this sudoku!");
        }

        emptySquares.clear();
    }//GEN-LAST:event_btnSolveActionPerformed

    private void btnDemoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDemoActionPerformed
        final int[][][] demoBoards = {
            {
                {7, 4, 0, 0, 3, 0, 0, 1, 0},
                {0, 1, 9, 0, 6, 8, 5, 0, 2},
                {0, 0, 0, 0, 0, 4, 3, 0, 0},
                {0, 5, 6, 3, 7, 0, 0, 0, 1},
                {0, 0, 1, 8, 0, 0, 0, 9, 5},
                {0, 9, 0, 0, 2, 0, 6, 0, 0},
                {1, 0, 3, 4, 0, 7, 2, 0, 0},
                {5, 0, 0, 2, 0, 0, 0, 0, 8},
                {0, 8, 0, 0, 0, 1, 4, 7, 0}
            },
            {
                {9, 0, 0, 0, 2, 8, 0, 5, 7},
                {5, 0, 0, 0, 1, 9, 2, 0, 3},
                {0, 3, 0, 5, 0, 0, 0, 6, 0},
                {0, 8, 0, 2, 0, 0, 3, 9, 5},
                {0, 0, 0, 7, 0, 6, 0, 0, 0},
                {3, 4, 1, 0, 0, 5, 0, 2, 0},
                {0, 6, 0, 0, 0, 7, 0, 3, 0},
                {1, 0, 8, 9, 5, 0, 0, 0, 4},
                {7, 5, 0, 4, 6, 0, 0, 0, 9}
            },
            {
                {3, 0, 6, 5, 0, 8, 4, 0, 0},
                {5, 2, 0, 0, 0, 0, 0, 0, 0},
                {0, 8, 7, 0, 0, 0, 0, 3, 1},
                {0, 0, 3, 0, 1, 0, 0, 8, 0},
                {9, 0, 0, 8, 6, 3, 0, 0, 5},
                {0, 5, 0, 0, 9, 0, 6, 0, 0},
                {1, 3, 0, 0, 0, 0, 2, 5, 0},
                {0, 0, 0, 0, 0, 0, 0, 7, 4},
                {0, 0, 5, 2, 0, 6, 3, 0, 0}
            },
            {
                {0, 4, 0, 8, 0, 5, 2, 0, 0},
                {0, 2, 0, 0, 4, 0, 0, 5, 0},
                {5, 0, 0, 0, 0, 0, 0, 0, 4},
                {0, 9, 0, 0, 0, 3, 1, 2, 0},
                {1, 0, 6, 0, 7, 8, 0, 0, 3},
                {3, 7, 0, 9, 0, 4, 0, 8, 0},
                {0, 0, 0, 0, 0, 6, 7, 0, 0},
                {0, 0, 8, 3, 5, 9, 0, 1, 0},
                {0, 1, 9, 0, 0, 7, 6, 0, 0}
            },
            {
                // invalid board 1
                {1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0}
            },
            {
                // invalid board 2
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 3, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 3, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0}
            }
        };

        int choice = (int) (Math.random() * demoBoards.length);
        loadDemoBoard(demoBoards[choice]);
    }//GEN-LAST:event_btnDemoActionPerformed

    private void loadDemoBoard(int[][] board) {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                String val = board[i][j] == 0 ? "" : String.valueOf(board[i][j]);
                boardIn[i][j].setText(val);
            }
        }
    }

    private void loadValues() {
        // copy values from boardIn to boardOut
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                try {
                    char val = boardIn[i][j].getVal();
                    if (val == (char) 0) {
                        emptySquares.add(new Pair(i, j));
                        boardOut[i][j].val = 0;
                    } else {
                        boardOut[i][j].val = (int) (val - '0');
                        boardOut[i][j].boldFont();
                        boardOut[i][j].setText(String.valueOf(val));
                    }
                } catch (InvalidInputException e) {
                    lblOutput.setForeground(Color.red);
                    lblOutput.setText(
                            "<html>Invalid input, please enter nothing for an unknown<br/>"
                            + "value or a number from 1-9 for each square!<html>"
                    );
                    return;
                }
            }
        }
    }

    private void outputBoard() {
        // output solved board onto right grid
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (boardOut[i][j].getText().isEmpty()) {
                    boardOut[i][j].unboldFont();
                    boardOut[i][j].setText(String.valueOf(boardOut[i][j].val));
                }
            }
        }
    }

    private int getSquare(int val) {
        return val / 3 * 3;
    }

    private boolean isValid(int iVal, int jVal, int val) {
        // check row and column
        for (int i = 0; i < BOARD_SIZE; i++) {
            if (boardOut[i][jVal].val == val) {
                return false;
            }
        }
        for (int j = 0; j < BOARD_SIZE; j++) {
            if (boardOut[iVal][j].val == val) {
                return false;
            }
        }

        // check 3x3 square
        for (int i = getSquare(iVal); i <= getSquare(iVal) + 2; i++) {
            for (int j = getSquare(jVal); j <= getSquare(jVal) + 2; j++) {
                if (boardOut[i][j].val == val) {
                    return false;
                }
            }
        }
        return true;
    }

    private boolean isValidPermutation() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (boardOut[i][j].val != 0) {
                    // copy value to avoid
                    // isValid() detecting current
                    // square is invalid
                    int copyVal = boardOut[i][j].val;
                    boardOut[i][j].val = 0;
                    
                    if (!isValid(i, j, copyVal)) {
                        boardOut[i][j].val = copyVal;
                        return false;
                    }
                    
                    boardOut[i][j].val = copyVal;
                }
            }
        }
        return true;
    }

    private boolean solveRecur(int emptyIndex) {
        // emptyIndex: index of emptySquares
        // for current empty square to check

        // base case:
        // all empty squares have been filled
        if (emptyIndex == emptySquares.size()) {
            return true;
        }

        int row = emptySquares.get(emptyIndex).row;
        int col = emptySquares.get(emptyIndex).col;
        for (int val = 1; val <= BOARD_SIZE; val++) {
            if (isValid(row, col, val)) {
                boardOut[row][col].val = val;
                if (solveRecur(emptyIndex + 1)) {
                    return true;
                }

                // backtracking
                boardOut[row][col].val = 0;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SudokuGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SudokuGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SudokuGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SudokuGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SudokuGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDemo;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSolve;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlBoardInput;
    private javax.swing.JPanel pnlBoardOutput;
    // End of variables declaration//GEN-END:variables
}
